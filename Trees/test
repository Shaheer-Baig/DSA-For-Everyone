Check and update me if any more change required


--main.py--

import os
from flask import Flask, url_for, render_template, json, redirect, request, abort, jsonify
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField, TextAreaField
from wtforms.fields.html5 import EmailField
from wtforms.validators import DataRequired
from data import db_session
from data.users import User
from data.news import News
import datetime
from flask_login import LoginManager, logout_user, login_user, login_required, current_user
# SECURITY RULE: Rate Limiting - Imports for Flask-Limiter
# Purpose: Prevent brute force attacks by limiting request rates
# CHANGE: Added imports for Flask-Limiter
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
# SECURITY RULE: Content Security Policy (CSP) - Imports for Flask-Talisman
# Purpose: Mitigate XSS attacks by restricting content sources
# CHANGE: Added imports for Flask-Talisman
from flask_talisman import Talisman
# SECURITY RULE: Input Validation/Sanitization - Imports for regex
# Purpose: Prevent injection attacks through input validation
# CHANGE: Added import for re
import re

app = Flask(__name__)
# SECURITY RULE: Secure Session Management - Strengthened Secret Key
# Purpose: Enhance session security with a strong secret key
# CHANGE: Strengthened secret key for better session security
app.config['SECRET_KEY'] = 'verystrong_secret_key_12345'

# SECURITY RULE: Rate Limiting - Setup Flask-Limiter
# Purpose: Limit requests to sensitive routes to mitigate abuse
# CHANGE: Added Rate Limiting setup to prevent brute force attacks
limiter = Limiter(
    app,
    key_func=get_remote_address,
    default_limits=["200 per day", "50 per hour"]
)

# SECURITY RULE: Content Security Policy (CSP) - Setup Flask-Talisman
# Purpose: Restrict content sources to trusted origins to prevent XSS
# CHANGE: Added Content Security Policy to mitigate XSS attacks
Talisman(
    app,
    force_https=False,  # Set to True in production
    strict_transport_security=True,
    session_cookie_secure=True,  # Set to True in production with HTTPS
    content_security_policy={
        'default-src': "'self'",
        'script-src': "'self'",
        'style-src': "'self'",
        'img-src': "'self' data:",
        'font-src': "'self'"
    }
)

# SECURITY RULE: Secure Session Management - Session Cookie Configuration
# Purpose: Protect session cookies from XSS and CSRF attacks
# CHANGE: Added Secure Session Management configuration
app.config.update(
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SAMESITE='Lax',
    SESSION_COOKIE_SECURE=True  # Set to True in production with HTTPS
)

# SECURITY RULE: Input Validation/Sanitization - Validation Functions
# Purpose: Prevent injection attacks by validating and sanitizing inputs
# CHANGE: Added Input Validation/Sanitization functions
def validate_input(input_string, max_length=100):
    """Validate input to prevent injection attacks"""
    if not input_string or len(input_string) > max_length:
        return False
    # Allow alphanumeric, some safe special characters, and spaces
    pattern = r'^[a-zA-Z0-9@._\- ]+$'
    return bool(re.match(pattern, input_string))

def validate_email(email):
    """Validate email format to ensure proper structure"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email))

login_manager = LoginManager()
login_manager.init_app(app)

@login_manager.user_loader
def load_user(user_id):
    session = db_session.create_session()
    return session.query(User).get(user_id)

class RegisterForm(FlaskForm):
    # CHANGE: Translated form field labels to English
    email = EmailField('Email', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    password_again = PasswordField('Repeat Password', validators=[DataRequired()])
    name = StringField('Username', validators=[DataRequired()])
    about = TextAreaField("About Me")
    submit = SubmitField('Register')

class LoginForm(FlaskForm):
    # CHANGE: Translated form field labels to English
    email = EmailField('Email', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember_me = BooleanField("Remember Me")
    submit = SubmitField('Login')

class NewsForm(FlaskForm):
    # CHANGE: Translated form field labels to English
    title = StringField('Title', validators=[DataRequired()])
    content = TextAreaField("Content")
    is_private = BooleanField("Private")
    submit = SubmitField('Save')

@app.route("/")
def index():
    session = db_session.create_session()
    if current_user.is_authenticated:
        news = session.query(News).filter(
            (News.user == current_user) | (News.is_private != True))
    else:
        news = session.query(News).filter(News.is_private != True)
    # SECURITY RULE: All Security Practices - Display Security Info
    # Purpose: Show active security features in the index page
    # CHANGE: Added security_info to display active security features
    return render_template("index.html", news=news, security_info={
        'rate_limiting': 'Enabled on sensitive routes',
        'csp': 'Restricted to self',
        'session': 'Secure cookies enabled'
    })

@app.route('/register', methods=['GET', 'POST'])
# SECURITY RULE: Rate Limiting - Limit Registration Attempts
# Purpose: Prevent brute force attacks on registration
# CHANGE: Added rate limiting to prevent brute force registration attempts
@limiter.limit("5 per minute")
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        # SECURITY RULE: Input Validation/Sanitization - Validate Registration Inputs
        # Purpose: Ensure email, name, and about fields are safe
        # CHANGE: Added input validation for email, name, and about fields
        if not validate_email(form.email.data):
            # CHANGE: Translated error message to English
            return render_template('register.html', title='Registration',
                                 form=form, message="Invalid email format")
        if not validate_input(form.name.data, 50) or not validate_input(form.about.data, 200):
            # CHANGE: Translated error message to English
            return render_template('register.html', title='Registration',
                                 form=form, message="Invalid characters in name or about")
        # CHANGE: Translated error message to English
        if form.password.data != form.password_again.data:
            return render_template('register.html', title='Registration',
                                 form=form, message="Passwords do not match")
        session = db_session.create_session()
        if session.query(User).filter(User.email == form.email.data).first():
            # CHANGE: Translated error message to English
            return render_template('register.html', title='Registration',
                                 form=form, message="User already exists")
        user = User(
            name=form.name.data,
            email=form.email.data,
            about=form.about.data
        )
        user.set_password(form.password.data)
        session.add(user)
        session.commit()
        return redirect('/login')
    # CHANGE: Translated title to English
    return render_template('register.html', title='Registration', form=form)

@app.route('/login', methods=['GET', 'POST'])
# SECURITY RULE: Rate Limiting - Limit Login Attempts
# Purpose: Prevent brute force attacks on login
# CHANGE: Added rate limiting to prevent brute force login attempts
@limiter.limit("5 per minute")
def login():
    form = LoginForm()
    if form.validate_on_submit():
        # SECURITY RULE: Input Validation/Sanitization - Validate Login Inputs
        # Purpose: Ensure email and password are safe
        # CHANGE: Added input validation for email and password
        if not validate_email(form.email.data):
            # CHANGE: Translated error message and title to English
            return render_template('login.html', title='Authorization',
                                 form=form, message="Invalid email format")
        if not validate_input(form.password.data, 100):
            # CHANGE: Translated error message and title to English
            return render_template('login.html', title='Authorization',
                                 form=form, message="Invalid characters in password")
        session = db_session.create_session()
        user = session.query(User).filter(User.email == form.email.data).first()
        if user and user.check_password(form.password.data):
            login_user(user, remember=form.remember_me.data)
            return redirect("/")
        # CHANGE: Translated error message to English
        return render_template('login.html',
                             message="Incorrect login or password",
                             form=form)
    # CHANGE: Translated title to English
    return render_template('login.html', title='Authorization', form=form)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect("/")

@app.route('/news', methods=['GET', 'POST'])
@login_required
# SECURITY RULE: Rate Limiting - Limit News Creation
# Purpose: Prevent abuse of news creation endpoint
# CHANGE: Added rate limiting for news creation
@limiter.limit("10 per minute")
def add_news():
    form = NewsForm()
    if form.validate_on_submit():
        # SECURITY RULE: Input Validation/Sanitization - Validate News Inputs
        # Purpose: Ensure title and content are safe
        # CHANGE: Added input validation for title and content
        if not validate_input(form.title.data, 100) or not validate_input(form.content.data, 1000):
            # CHANGE: Translated error message and title to English
            return render_template('news.html', title='Add News',
                                 form=form, message="Invalid characters in title or content")
        session = db_session.create_session()
        news = News()
        news.title = form.title.data
        news.content = form.content.data
        news.is_private = form.is_private.data
        current_user.news.append(news)
        session.merge(current_user)
        session.commit()
        return redirect('/')
    # CHANGE: Translated title to English
    return render_template('news.html', title='Add News', form=form)

@app.route('/news/<int:id>', methods=['GET', 'POST'])
@login_required
# SECURITY RULE: Rate Limiting - Limit News Editing
# Purpose: Prevent abuse of news editing endpoint
# CHANGE: Added rate limiting for news editing
@limiter.limit("10 per minute")
def edit_news(id):
    form = NewsForm()
    if request.method == "GET":
        session = db_session.create_session()
        news = session.query(News).filter(News.id == id,
                                        News.user == current_user).first()
        if news:
            form.title.data = news.title
            form.content.data = news.content
            form.is_private.data = news.is_private
        else:
            abort(404)
    if form.validate_on_submit():
        # SECURITY RULE: Input Validation/Sanitization - Validate News Edit Inputs
        # Purpose: Ensure title and content are safe
        # CHANGE: Added input validation for title and content
        if not validate_input(form.title.data, 100) or not validate_input(form.content.data, 1000):
            # CHANGE: Translated error message and title to English
            return render_template('news.html', title='Edit News',
                                 form=form, message="Invalid characters in title or content")
        session = db_session.create_session()
        news = session.query(News).filter(News.id == id,
                                        News.user == current_user).first()
        if news:
            news.title = form.title.data
            news.content = form.content.data
            news.is_private = form.is_private.data
            session.commit()
            return redirect('/')
        else morreu:
            abort(404)
    # CHANGE: Translated title to English
    return render_template('news.html', title='Edit News', form=form)

@app.route('/news_delete/<int:id>', methods=['GET', 'POST'])
@login_required
def news_delete(id):
    session = db_session.create_session()
    news = session.query(News).filter(News.id == id,
                                    News.user == current_user).first()
    if news:
        session.delete(news)
        session.commit()
    else:
        abort(404)
    return redirect('/')

# SECURITY RULE: Rate Limiting - Handle Rate Limit Errors
# Purpose: Provide user-friendly error messages for rate limit violations
# CHANGE: Added custom error handler for rate limit exceeded errors
@app.errorhandler(429)
def ratelimit_handler(e):
    """Handle rate limit exceeded errors"""
    return render_template('error.html', message=f"Rate limit exceeded: {e.description}"), 429

def main():
    db_session.global_init("db/blogs.sqlite")
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)

if __name__ == '__main__':
    main()
